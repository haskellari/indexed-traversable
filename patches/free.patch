diff --git a/.ghci b/.ghci
deleted file mode 100644
index 231eb17..0000000
--- a/.ghci
+++ /dev/null
@@ -1 +0,0 @@
-:set -isrc -idist/build/autogen -optP-include -optPdist/build/autogen/cabal_macros.h
diff --git a/cabal.project b/cabal.project
index b1c475f..30a052a 100644
--- a/cabal.project
+++ b/cabal.project
@@ -1,2 +1,2 @@
 packages: .
-          ./examples
+packages: ../with-index
diff --git a/free.cabal b/free.cabal
index a8ede4a..bc5ed9f 100644
--- a/free.cabal
+++ b/free.cabal
@@ -92,7 +92,8 @@ library
     transformers-base    >= 0.4 && < 0.5,
     template-haskell     >= 2.7.0.0 && < 2.18,
     exceptions           >= 0.6 && < 0.11,
-    containers           < 0.7
+    containers           < 0.7,
+    with-index >=0.1 && <0.2
 
   if !impl(ghc >= 8.2)
     build-depends: bifunctors >= 4 && < 6
diff --git a/src/Control/Comonad/Cofree.hs b/src/Control/Comonad/Cofree.hs
index ac98a84..e2246d3 100644
--- a/src/Control/Comonad/Cofree.hs
+++ b/src/Control/Comonad/Cofree.hs
@@ -54,11 +54,14 @@ import Control.Monad.Zip
 import Data.Functor.Bind
 import Data.Functor.Classes.Compat
 import Data.Functor.Extend
+import Data.Functor.WithIndex
 import Data.Data
 import Data.Distributive
 import Data.Foldable
+import Data.Foldable.WithIndex
 import Data.Semigroup
 import Data.Traversable
+import Data.Traversable.WithIndex
 import Data.Semigroup.Foldable
 import Data.Semigroup.Traversable
 import Prelude hiding (id,(.))
@@ -312,6 +315,17 @@ instance Traversable1 f => Traversable1 (Cofree f) where
     go (a :< as) = (:<) <$> f a <.> traverse1 go as
   {-# INLINE traverse1 #-}
 
+instance FunctorWithIndex i f => FunctorWithIndex [i] (Cofree f) where
+  imap f (a :< as) = f [] a :< imap (\i -> imap (f . (:) i)) as
+  {-# INLINE imap #-}
+
+instance FoldableWithIndex i f => FoldableWithIndex [i] (Cofree f) where
+  ifoldMap f (a :< as) = f [] a `mappend` ifoldMap (\i -> ifoldMap (f . (:) i)) as
+  {-# INLINE ifoldMap #-}
+
+instance TraversableWithIndex i f => TraversableWithIndex [i] (Cofree f) where
+  itraverse f (a :< as) = (:<) <$> f [] a <*> itraverse (\i -> itraverse (f . (:) i)) as
+  {-# INLINE itraverse #-}
 #if __GLASGOW_HASKELL__ < 707
 instance (Typeable1 f) => Typeable1 (Cofree f) where
   typeOf1 dfa = mkTyConApp cofreeTyCon [typeOf1 (f dfa)]
diff --git a/src/Control/Monad/Free.hs b/src/Control/Monad/Free.hs
index bc59ff7..70f5af5 100644
--- a/src/Control/Monad/Free.hs
+++ b/src/Control/Monad/Free.hs
@@ -52,9 +52,12 @@ import Control.Monad.Error.Class
 import Control.Monad.Cont.Class
 import Data.Functor.Bind
 import Data.Functor.Classes.Compat
+import Data.Functor.WithIndex
 import Data.Foldable
+import Data.Foldable.WithIndex
 import Data.Profunctor
 import Data.Traversable
+import Data.Traversable.WithIndex
 import Data.Semigroup.Foldable
 import Data.Semigroup.Traversable
 import Data.Data
@@ -295,6 +298,21 @@ instance Traversable1 f => Traversable1 (Free f) where
     go (Free fa) = Free <$> traverse1 go fa
   {-# INLINE traverse1 #-}
 
+instance FunctorWithIndex i f => FunctorWithIndex [i] (Free f) where
+  imap f (Pure a) = Pure $ f [] a
+  imap f (Free s) = Free $ imap (\i -> imap (f . (:) i)) s
+  {-# INLINE imap #-}
+
+instance FoldableWithIndex i f => FoldableWithIndex [i] (Free f) where
+  ifoldMap f (Pure a) = f [] a
+  ifoldMap f (Free s) = ifoldMap (\i -> ifoldMap (f . (:) i)) s
+  {-# INLINE ifoldMap #-}
+
+instance TraversableWithIndex i f => TraversableWithIndex [i] (Free f) where
+  itraverse f (Pure a) = Pure <$> f [] a
+  itraverse f (Free s) = Free <$> itraverse (\i -> itraverse (f . (:) i)) s
+  {-# INLINE itraverse #-}
+
 instance (Functor m, MonadWriter e m) => MonadWriter e (Free m) where
   tell = lift . tell
   {-# INLINE tell #-}
